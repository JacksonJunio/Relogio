/*  StarSimulation was written to utilize any 128x64 display. I was inspired by past versions of 
 *  MicroSoft Windows screen savers of the Starfield Simulation. Please feel free to modify and share
 *  this code for any 128x64 LCD or OLED. StarSimulation sketch was written for use with I2C SH1106.
 *  This code must be modified to work with other display devices. This code was written with (50) stars
 *  and may use upto 200 stars with an UNO R3.
 *  
 *  This code was written entirely by Greg Stievenart with no claim to or any images or information 
 *  provided in this code. Freely published June 21, 2016.
 */

#include <Wire.h>                     // requried to run I2C SH1106
#include <SPI.h>                      // requried to run I2C SH1106
#include <Adafruit_GFX.h>             // https://github.com/adafruit/Adafruit-GFX-Library
#include <Adafruit_SH1106.h>          // https://github.com/wonho-maker/Adafruit_SH1106

#define OLED_RESET 4                  // reset required for SH1106

Adafruit_SH1106 display(OLED_RESET);  // reset required for SH1106

const byte _0011_0[] PROGMEM ={
0x7F,0xFF,0xC0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0x7F,0xFF,0xC0,
};

const byte _0010_1[] PROGMEM ={
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x01,0xF8,0x00,
0x01,0xF8,0x00,
0x01,0xF8,0x00,
0x03,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
};

const byte _0009_2[] PROGMEM ={
0x3F,0xFF,0xC0,
0x7F,0xFF,0xE0,
0x7F,0xFF,0xE0,
0x7F,0xFF,0xE0,
0x7C,0x03,0xE0,
0x7C,0x03,0xE0,
0x7C,0x03,0xE0,
0x7C,0x03,0xE0,
0x00,0x07,0xE0,
0x00,0x0F,0xC0,
0x00,0x1F,0x80,
0x00,0x3F,0x00,
0x00,0x7E,0x00,
0x00,0xFC,0x00,
0x01,0xF8,0x00,
0x03,0xF0,0x00,
0x07,0xE0,0x00,
0x0F,0xC0,0x00,
0x1F,0x80,0x00,
0x3F,0x00,0x00,
0x7F,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
};

const byte _0008_3[] PROGMEM ={
0x7F,0xFF,0xC0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0x00,0x07,0xE0,
0x00,0x3F,0xE0,
0x00,0xFF,0x80,
0x01,0xFC,0x00,
0x00,0xFF,0x80,
0x00,0x3F,0xE0,
0x00,0x0F,0xE0,
0x00,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0x7F,0xFF,0xC0,
};

const byte _0007_4[] PROGMEM ={
0x00,0x7E,0x00,
0x00,0x7C,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x01,0xF0,0x00,
0x03,0xE0,0x00,
0x03,0xE0,0x00,
0x07,0xC0,0x00,
0x07,0xC7,0x80,
0x0F,0x87,0x80,
0x1F,0x07,0x80,
0x1F,0x07,0x80,
0x3E,0x07,0x80,
0x3E,0x07,0x80,
0x7C,0x07,0x80,
0xFC,0x07,0x80,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0x00,0x07,0x80,
0x00,0x07,0x80,
0x00,0x07,0x80,
0x00,0x07,0x80,
};

const byte _0006_5[] PROGMEM ={
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xF8,0x00,0x00,
0xF8,0x00,0x00,
0xF8,0x00,0x00,
0xF8,0x00,0x00,
0xF8,0x00,0x00,
0xFF,0xFF,0xC0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0x00,0x03,0xE0,
0x00,0x03,0xE0,
0x00,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0x7F,0xFF,0xC0,
};

const byte _0005_6[] PROGMEM ={
0x7F,0xFF,0xC0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x00,0x00,
0xF8,0x00,0x00,
0xF8,0x00,0x00,
0xFF,0xFF,0xC0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0x7F,0xFF,0xC0,
};

const byte _0004_7[] PROGMEM ={
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xC0,
0xF8,0x07,0xC0,
0x00,0x07,0xC0,
0x00,0x0F,0x80,
0x00,0x0F,0x80,
0x00,0x1F,0x00,
0x00,0x1F,0x00,
0x00,0x3E,0x00,
0x00,0x3E,0x00,
0x00,0x3C,0x00,
0x00,0x7C,0x00,
0x00,0x7C,0x00,
0x00,0xF8,0x00,
0x00,0xF8,0x00,
0x01,0xF0,0x00,
0x01,0xF0,0x00,
0x03,0xE0,0x00,
0x03,0xE0,0x00,
0x07,0xE0,0x00,
};

const byte _0003_8[] PROGMEM ={
0x7F,0xFF,0xC0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xFF,0x1F,0xE0,
0x7F,0xFF,0xC0,
0x0F,0xFE,0x00,
0x1F,0xFF,0x00,
0x7F,0xBF,0xC0,
0xFC,0x07,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0x7F,0xFF,0xC0,
};

const byte _0002_9[] PROGMEM ={
0x7F,0xFF,0xC0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0x7F,0xFF,0xE0,
0x00,0x03,0xE0,
0x00,0x03,0xE0,
0x00,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xF8,0x03,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0x7F,0xFF,0xC0,
};

const byte pt[] PROGMEM ={
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
0xFF,0xFF,0xE0,
};


const byte  _0[] PROGMEM ={
0x7F,0xC0,
0xFF,0xE0,
0xFF,0xE0,
0xF1,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xF1,0xE0,
0xFF,0xE0,
0xFF,0xE0,
0x7F,0xC0,
};

const byte _1[] PROGMEM ={
0x07,0x00,
0x0F,0x00,
0x1F,0x00,
0x3F,0x00,
0x3F,0x00,
0x07,0x00,
0x07,0x00,
0x07,0x00,
0x07,0x00,
0x07,0x00,
0x07,0x00,
0x07,0x00,
0x07,0x00,
0x07,0x00,
0x07,0x00,
0x07,0x00,
};

const byte _2[] PROGMEM ={
0x7F,0xC0,
0xFF,0xE0,
0xFF,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0x01,0xE0,
0x03,0xC0,
0x07,0x80,
0x0F,0x00,
0x1E,0x00,
0x3C,0x00,
0x78,0x00,
0xF0,0x00,
0xFF,0xE0,
0xFF,0xE0,
0xFF,0xE0,
};

const byte _3[] PROGMEM ={
0x7F,0xC0,
0xFF,0xE0,
0xFF,0xE0,
0xE1,0xE0,
0x00,0xE0,
0x01,0xE0,
0x03,0xC0,
0x07,0x80,
0x07,0x80,
0x03,0xC0,
0x01,0xE0,
0x00,0xE0,
0xE1,0xE0,
0xFF,0xE0,
0xFF,0xE0,
0x7F,0xC0,
};

const byte _4[] PROGMEM ={
0x03,0x80,
0x07,0x80,
0x0F,0x80,
0x1F,0x80,
0x3F,0x80,
0x7B,0x80,
0xF3,0x80,
0xE3,0x80,
0xE3,0x80,
0xE3,0x80,
0xFF,0xE0,
0xFF,0xE0,
0xFF,0xE0,
0x03,0x80,
0x03,0x80,
0x03,0x80,
};

const byte _5[] PROGMEM ={
0xFF,0xE0,
0xFF,0xE0,
0xFF,0xE0,
0xE0,0x00,
0xE0,0x00,
0xE0,0x00,
0xFF,0x80,
0xFF,0xC0,
0xFF,0xE0,
0x01,0xE0,
0x00,0xE0,
0x00,0xE0,
0xE1,0xE0,
0xFF,0xE0,
0xFF,0xC0,
0x7F,0x80,
};

const byte _6[] PROGMEM ={
0x7F,0xC0,
0xFF,0xE0,
0xFF,0xE0,
0xF0,0xE0,
0xE0,0x00,
0xE0,0x00,
0xE0,0x00,
0xFF,0xC0,
0xFF,0xE0,
0xFF,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xFF,0xE0,
0xFF,0xE0,
0x7F,0xC0,
};

const byte _7[] PROGMEM ={
0xFF,0xE0,
0xFF,0xE0,
0xFF,0xE0,
0xE0,0xE0,
0x00,0xE0,
0x00,0xE0,
0x01,0xE0,
0x03,0xC0,
0x07,0x80,
0x0F,0x00,
0x1E,0x00,
0x3C,0x00,
0x78,0x00,
0xF0,0x00,
0xE0,0x00,
0xC0,0x00,
};

const byte _8[] PROGMEM ={
0x7F,0xC0,
0xFF,0xE0,
0xFF,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xF1,0xE0,
0x7F,0xC0,
0x7F,0xC0,
0xF1,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xFF,0xE0,
0xFF,0xE0,
0x7F,0xC0,
};

const byte _9[] PROGMEM ={
0x7F,0xC0,
0xFF,0xE0,
0xFF,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xFF,0xE0,
0xFF,0xE0,
0x7F,0xE0,
0x00,0xE0,
0x00,0xE0,
0xE0,0xE0,
0xE0,0xE0,
0xFF,0xE0,
0xFF,0xE0,
0x7F,0xC0,
};

const byte _pt[] PROGMEM ={
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
0xFF,0xF0,
};

int in3 = 0;

void setup() {

  display.begin(SH1106_SWITCHCAPVCC, 0x3C);     // needed for SH1106 display
  display.clearDisplay();                       // clear display
  pinMode(7,INPUT_PULLUP);
  
}

void loop() {
  

  
if(digitalRead(7)==LOW){
while(digitalRead(7) == LOW);

in3++;
if(in3 >=2)
{
in3 = 0;
}
}
  
  mostraS( in3 );

}


void mostraS( int z)

{

  
switch (z) {
  
    case 0:
    
   display.clearDisplay();
   display.drawBitmap(100, 20,  _0, 16, 16, 1);
   display.display();
   
      break;
      
    case 1:
    
    for(int i = 0 ; i < 20 ; i+=8 )
   {
      display.clearDisplay();
      display.drawBitmap(100, 20-i,  _0, 16, 16, 1);
      display.drawBitmap(100, 40-i,  _1, 16, 16, 1);
      display.drawBitmap(100, 0,  _pt, 16, 16, 0);
      display.drawBitmap(100, 40,  _pt, 16, 16, 0);
      display.display();
   }
  
in3 = 2;
      break;
      
    case 2:
      display.clearDisplay();
   display.drawBitmap(100, 20,  _1, 16, 16, 1);
   display.display();
    break;
    
     case 3:
     
    break;
     case 4:
    
    break;
     case 5:
    
    break;
     case 6:
    
    break;
     case 7:
    
    break;
     case 8:
     
    break;
     case 9:
     
    break;
    
    
  }

} 
